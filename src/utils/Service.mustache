import { ScalarsClientManager } from './ScalarsClientManager'
import { ScalarsClientConfig } from './ScalarsClient'
import { DocumentNode } from 'graphql'
import { ApolloClient, FetchPolicy, NormalizedCacheObject } from '@apollo/client'

interface ApolloOptions {
    fetchPolicy?: FetchPolicy
}

export enum ClientType {
    CLIENT = 'explicit', // THIS WILL REPLACE IMPLICIT
    COOKIE = 'cookie', // THIS WILL REPLACE CODE
}

export interface ClientOptions {
    client?: ClientType
    apolloOptions?: ApolloOptions
}

interface MutationApolloOptions {
    fetchPolicy?: Extract<FetchPolicy, 'no-cache'>
}

export interface MutationClientOptions {
    client?: ClientType
    auth?: boolean
    apolloOptions?: MutationApolloOptions
}

export class Service {
    private readonly scalarsApiClientManager: ScalarsClientManager

    constructor ( config: ScalarsClientConfig ) {
        this.scalarsApiClientManager = new ScalarsClientManager(
            config.endpoint,
            config.authorization
        )
    }

    async doQuery<T, U> (
        query: DocumentNode,
        variables?: U,
        clientOptions?: ClientOptions
    ): Promise<T> {
        const client: ApolloClient<NormalizedCacheObject> = this.scalarsApiClientManager.getClient( clientOptions?.client )
        try {
            const response = await client.query( {
                fetchPolicy: 'no-cache',
                query,
                variables,
                ...clientOptions?.apolloOptions
            } )
            return Service.getResponse<T>( response as any )
        }
        catch ( error ) {
            return Service.getResponse<T>( { error } as any );
        }
    }

    async doMutation<T, U> (
        mutation: DocumentNode,
        variables?: U,
        clientOptions?: MutationClientOptions
    ): Promise<T> {
        const client: ApolloClient<NormalizedCacheObject> = this.scalarsApiClientManager.getClient( clientOptions?.client )
        try {
            const response = await client.mutate( {
               mutation,
                variables,
                ...clientOptions?.apolloOptions
            } )
            return Service.getResponse<T>( response as any )
        }
        catch ( error ) {
            return Service.getResponse<T>( { error } as any );
        }
    }

    private static getResponse<T> ( { data, error }: { data: T, error: T } ): T {
        if ( data ) {
            return data;
        }
        throw error;
    }
}
