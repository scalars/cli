import { ApolloClient, ApolloLink, HttpLink, InMemoryCache, NormalizedCacheObject, FetchPolicy, gql } from '@apollo/client';
import { setContext } from '@apollo/client/link/context';
import { ClientType } from './Service';

export type TokenFunction = ()=> string | string
export type FetchFunction = ( uri: string, options: any )=> Promise<any>

type ApolloClients = {
    [key in ClientType]: {
        client: ApolloClient<NormalizedCacheObject>|null
        fetch?: FetchFunction
        credentials?: string
        token?: string
    }
}

export class ScalarsClientManager {
    private readonly apolloClients: ApolloClients
    private readonly defaultClientType: ClientType
    private readonly cache: InMemoryCache
    private readonly uri: string

    constructor ( uri: string, getToken: TokenFunction, defaultClientType: ClientType = ClientType.COOKIE ) {
        if ( !uri ) {
            throw new Error( 'URI is empty' )
        }
        this.defaultClientType = defaultClientType;
        this.uri = uri;
        this.cache = new InMemoryCache( { addTypename: false } )
        this.apolloClients = {
            [ClientType.CLIENT]: {
                client: null,
                credentials: 'omit',
                token: getToken()
            },
            [ClientType.COOKIE]: {
                client: null,
                credentials: 'include'
            }
        }
    }

    getClient ( name: ClientType = this.defaultClientType, ssrMode: boolean = false ): ApolloClient<NormalizedCacheObject> {
        const apolloClient = this.apolloClients[name]
        if ( apolloClient && !apolloClient.client) {
            const { credentials, token } = apolloClient
            let authLink: ApolloLink | undefined;
            if ( token ) {
                authLink = setContext( ( _, { headers } ) => {
                    return {
                        headers: { ...headers, Authorization: token }
                    }
                } )
            }
            const httpLink = new HttpLink( {
                uri: this.uri,
                credentials,
                fetch: fetch as any,
                fetchOptions: {
                    credentials
                }
            } )
            apolloClient.client = new ApolloClient<NormalizedCacheObject>( {
                link: authLink ? authLink.concat( httpLink ) : httpLink,
                cache: this.cache,
                ssrMode
            } )
        }
        return apolloClient.client as ApolloClient<NormalizedCacheObject>
    }
}
