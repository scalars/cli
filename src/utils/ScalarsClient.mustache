import { DocumentNode } from 'graphql'
import { ApolloClient, ApolloLink, FetchPolicy, NormalizedCacheObject, InMemoryCache, HttpLink } from '@apollo/client'
import { setContext } from '@apollo/client/link/context'
import { gql } from 'graphql-tag'
import fetch from 'node-fetch'
import { config } from 'dotenv'

const prod: boolean = process.env.NODE_ENV === 'production'
const { error, parsed } = config( { path: join( process.cwd(), `${prod ? '.env.prod' : '.env.dev'}` ) } )

if ( !error && parsed && parsed.SCALARS_ENDPOINT ) {
    // Environment variables loaded successfully
    currentEndpoint = parsed.SCALARS_ENDPOINT as string
    } else {
        console.info( `ScalarsClientError: Couldn't load endpoint` )
        return
    }
}

// Service

interface ApolloOptions {
    fetchPolicy?: FetchPolicy
}

export enum ClientType {
    CLIENT = 'explicit', // THIS WILL REPLACE IMPLICIT
    COOKIE = 'cookie', // THIS WILL REPLACE CODE
}

export interface ClientOptions {
    client?: ClientType
    apolloOptions?: ApolloOptions
}

interface MutationApolloOptions {
    fetchPolicy?: Extract<FetchPolicy, 'no-cache'>
}

export interface MutationClientOptions {
    client?: ClientType
    auth?: boolean
    apolloOptions?: MutationApolloOptions
}

export class Service {
    private readonly scalarsApiClientManager: ScalarsClientManager

    constructor ( config: ScalarsClientConfig ) {
        this.scalarsApiClientManager = new ScalarsClientManager(
            `${currentEndpoint}/api/v1`,
            config.authorization
        )
    }

    async doQuery<T, U> (
        query: DocumentNode,
        variables?: U,
        clientOptions?: ClientOptions
    ): Promise<T> {
        const client: ApolloClient<NormalizedCacheObject> = this.scalarsApiClientManager.getClient( clientOptions?.client )
        try {
            const response = await client.query( {
                fetchPolicy: 'network-only',
                query,
                variables,
                ...clientOptions?.apolloOptions
            } )
            return Service.getResponse<T>( response as any )
        }
        catch ( error ) {
            return Service.getResponse<T>( { error } as any );
        }
    }

    async doMutation<T, U> (
       mutation: DocumentNode,
        variables?: U,
        clientOptions?: MutationClientOptions
    ): Promise<T> {
        const client: ApolloClient<NormalizedCacheObject> = this.scalarsApiClientManager.getClient( clientOptions?.client )
        try {
            const response = await client.mutate( {
                mutation,
                variables,
                ...clientOptions?.apolloOptions
            } )
            return Service.getResponse<T>( response as any )
        }
        catch ( error ) {
            return Service.getResponse<T>( { error } as any );
        }
    }

    private static getResponse<T> ( { data, error }: { data: T, error: T } ): T {
        if ( data ) {
            return data;
        }
        throw error;
    }
}

// DefaultServices

{{#schemaTypes}}
{{{.}}}
{{/schemaTypes}}

{{#selects}}
    export type {{name}} = {
    {{#fields}}
        {{name}}?: {{type}}
    {{/fields}}
    }
{{/selects}}

const parseSelectFields = ( select: Record<string ,any> ): string => {
    let fields: string = ''
    Object.keys( select ).forEach( key => {
        if ( typeof select[key] === 'boolean' ) {
            fields = fields.concat( `${key} ` )
        }
        else {
            fields = fields.concat( `${key} { ${parseSelectFields( select[key] )}} ` )
        }
    } )
    return fields
}

const fillSelectedFields = ( operation: string, select: Record<string, any> ): DocumentNode => {
   return gql`${operation.replace( '#@@', parseSelectFields( select ) )}`
}

export class QueriesService extends Service {
    {{#operations}}
    {{#queries}}
        async {{operation}} ( args: {
        select?: {{#select}}{{name}}{{/select}},
        {{#args}}
        {{name}}{{^requiredType}}?{{/requiredType}}: {{{type}}},
        {{/args}}
        clientOptions?: ClientOptions
    } ): Promise<{{#return}}{{#list}}Array<{{{type}}}{{^requiredType}} | null{{/requiredType}}>{{^requiredList}} | null {{/requiredList}}{{/list}}{{^list}}{{{type}}}{{^requiredType}} | null{{/requiredType}}{{/list}}{{/return}}> {
        const get{{_operation}}Query: string = `
            query get{{_operation}} (
            {{#args}}
                ${{name}}: {{#scalarType}}{{.}}{{/scalarType}}{{^scalarType}}{{{type}}}{{/scalarType}}{{#requiredType}}!{{/requiredType}},
            {{/args}}
            ) {
                {{operation}} (
                    {{#args}}
                    {{name}}: ${{name}},
                    {{/args}}
                ) {
                    #@@
                }
            }
        `
        const { {{operation}} } = await this.doQuery<Record<'{{operation}}', {{#return}}{{#list}}Array<{{{type}}}{{^requiredType}} | null{{/requiredType}}>{{^requiredList}} | null {{/requiredList}}{{/list}}{{^list}}{{{type}}}{{^requiredType}} | null{{/requiredType}}{{/list}}{{/return}}>, Query{{_operation}}Args>(
            fillSelectedFields( get{{_operation}}Query, args.select || { id: true } ),
            Object.fromEntries( Object.entries( args ).filter( ( [ k, v ] ) =>  v !== null && k !== 'select' && k !== 'clientOptions' ) ) as Query{{_operation}}Args,
            { ...args.clientOptions }
        )
        return {{operation}}
    }
    {{/queries}}
    {{/operations}}
}

export class MutationsService extends Service {
    {{#operations}}
    {{#mutations}}
    async {{operation}} ( args: {
        select?: {{#select}}{{name}}{{/select}},
        {{#args}}
        {{name}}{{^requiredType}}?{{/requiredType}}: {{{type}}},
        {{/args}}
        clientOptions?: MutationClientOptions
    } ): Promise<{{#return}}{{#list}}Array<{{{type}}}{{^requiredType}} | null{{/requiredType}}>{{^requiredList}} | null {{/requiredList}}{{/list}}{{^list}}{{{type}}}{{^requiredType}} | null{{/requiredType}}{{/list}}{{/return}}> {
        const {{_operation}}Mutation: string = `
            mutation {{_operation}} (
            {{#args}}
                ${{name}}: {{#scalarType}}{{.}}{{/scalarType}}{{^scalarType}}{{{type}}}{{/scalarType}}{{#requiredType}}!{{/requiredType}},
            {{/args}}
            ) {
                {{operation}} (
                {{#args}}
                    {{name}}: ${{name}},
                {{/args}}
                ) {
                    #@@
                }
            }
            `
            const { {{operation}} } = await this.doMutation<Record<'{{operation}}', {{#return}}{{#list}}Array<{{{type}}}{{^requiredType}} | null{{/requiredType}}>{{^requiredList}} | null {{/requiredList}}{{/list}}{{^list}}{{{type}}}{{^requiredType}} | null{{/requiredType}}{{/list}}{{/return}}>, Mutation{{_operation}}Args>(
                fillSelectedFields( {{_operation}}Mutation, args.select || { id: true } ),
                Object.fromEntries( Object.entries( args ).filter( ( [ k, v ] ) =>  v !== null && k !== 'select' && k !== 'clientOptions' ) ) as Mutation{{_operation}}Args,
                { ...args.clientOptions }
            )
            return {{operation}}
        }
    {{/mutations}}
    {{/operations}}
}


// ScalarsClientManager

export type TokenFunction = ()=> string
export type FetchFunction = ( uri: string, options: any )=> Promise<any>

type ApolloClients = {
    [key in ClientType]: {
        client: ApolloClient<NormalizedCacheObject>|null
        fetch?: FetchFunction
        credentials?: string
        token?: string
    }
}

export class ScalarsClientManager {
    private readonly apolloClients: ApolloClients
    private readonly defaultClientType: ClientType
    private readonly cache: InMemoryCache
    private readonly uri: string

    constructor ( uri: string, getToken: TokenFunction, defaultClientType: ClientType = ClientType.COOKIE ) {
        if ( !uri ) {
            throw new Error( 'URI is empty' )
        }
        this.defaultClientType = defaultClientType;
        this.uri = uri;
        this.cache = new InMemoryCache( { addTypename: false } )
        this.apolloClients = {
            [ClientType.CLIENT]: {
                client: null,
                credentials: 'omit',
                token: getToken()
            },
            [ClientType.COOKIE]: {
                client: null,
                credentials: 'include'
            }
        }
    }

    getClient ( name: ClientType = this.defaultClientType, ssrMode: boolean = false ): ApolloClient<NormalizedCacheObject> {
        const apolloClient = this.apolloClients[name]
        if ( apolloClient && !apolloClient.client) {
            const { credentials, token } = apolloClient
            let authLink: ApolloLink | undefined;
            if ( token ) {
                authLink = setContext( ( _, { headers } ) => {
                    return {
                        headers: { ...headers, Authorization: token }
                    }
                } )
            }
            const httpLink = new HttpLink( {
                uri: this.uri,
                credentials,
                fetch: fetch as any,
                fetchOptions: {
                    credentials
                }
            } )
            apolloClient.client = new ApolloClient<NormalizedCacheObject>( {
                link: authLink ? authLink.concat( httpLink ) : httpLink,
                cache: this.cache,
                ssrMode
            } )
        }
        return apolloClient.client as ApolloClient<NormalizedCacheObject>
    }
}

// ScalarsClient

export interface ScalarsClientConfig {
    endpoint: string
    authorization: TokenFunction
}

export class ScalarsClient {
    private readonly queriesService: QueriesService
    private readonly mutationsService: MutationsService
    private readonly genericService: Service

    constructor( config: ScalarsClientConfig ) {
        this.queriesService = new QueriesService( config )
        this.mutationsService = new MutationsService( config )
        this.genericService = new Service( config )
    }

    get query () {
        return this.queriesService
    }

    get mutation () {
        return this.mutationsService
    }

    async doQuery ( query: string, variables: Record<string, any>, clientOptions?: ClientOptions ): Promise<Record<string, any>> {
        return await this.genericService.doQuery<Record<string, any >, Record<string, any>>( gql`${query}`, variables, clientOptions )
    }

    async doMutation ( mutation: string, variables: Record<string, any>, clientOptions?: MutationClientOptions ): Promise<Record<string, any>> {
        return await this.genericService.doMutation<Record<string, any >, Record<string, any>>( gql`${mutation}`, variables, clientOptions )
    }
}
